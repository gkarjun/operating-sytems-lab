#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2
#define LEFT (ph_num + 4) % NUM_PHILOSOPHERS
#define RIGHT (ph_num + 1) % NUM_PHILOSOPHERS

pthread_mutex_t mutex;
pthread_mutex_t s[NUM_PHILOSOPHERS];

int state[NUM_PHILOSOPHERS];
int phil_num[NUM_PHILOSOPHERS] = {0, 1, 2, 3, 4};

void test(int ph_num) {
    if (state[ph_num] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING) {
        state[ph_num] = EATING;
        sleep(2); // Simulate eating
        printf("Philosopher %d takes fork %d and %d\n", ph_num + 1, LEFT + 1, ph_num + 1);
        printf("Philosopher %d is Eating\n", ph_num + 1);
        pthread_mutex_unlock(&s[ph_num]);
    }
}

void take_fork(int ph_num) {
    pthread_mutex_lock(&mutex);
    state[ph_num] = HUNGRY;
    printf("Philosopher %d is Hungry\n", ph_num + 1);
    test(ph_num);
    pthread_mutex_unlock(&mutex);
    pthread_mutex_lock(&s[ph_num]);
    sleep(1); // Simulate picking up forks
}

void put_fork(int ph_num) {
    pthread_mutex_lock(&mutex);
    state[ph_num] = THINKING;
    printf("Philosopher %d putting fork %d and %d down\n", ph_num + 1, LEFT + 1, ph_num + 1);
    printf("Philosopher %d is thinking\n", ph_num + 1);
    test(LEFT);
    test(RIGHT);
    pthread_mutex_unlock(&mutex);
}

void *philosopher(void *arg) {
    while (1) {
        int *ph_num = arg;
        sleep(1); // Simulate thinking
        take_fork(*ph_num);
        sleep(0); // Simulate eating
        put_fork(*ph_num);
    }
}

int main() {
    pthread_t tid[NUM_PHILOSOPHERS];
    pthread_mutex_init(&mutex, NULL);

    for (int i = 0; i < NUM_PHILOSOPHERS; i++)
        pthread_mutex_init(&s[i], NULL);

    for (int i = 0; i < NUM_PHILOSOPHERS; i++)
        pthread_create(&tid[i], NULL, philosopher, &phil_num[i]);

    for (int i = 0; i < NUM_PHILOSOPHERS; i++)
        pthread_join(tid[i], NULL);

    pthread_mutex_destroy(&mutex);

    for (int i = 0; i < NUM_PHILOSOPHERS; i++)
        pthread_mutex_destroy(&s[i]);

    return 0;
}
